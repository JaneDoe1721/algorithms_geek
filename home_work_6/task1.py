# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
#
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
#
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
#
# b. написать 3 варианта кода (один у вас уже есть);
#
# проанализировать 3 варианта и выбрать оптимальный;
#
# c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом
# Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
#
# d. написать общий вывод: какой из трёх вариантов лучше и почему.

# Вывод:
# Вариант №1, довольно простой в написании и занимает меньше всего памяти.
# (type=<class 'list'>, size=128 + type=<class 'int'>, size=28)

# Вариант №2, сложней в написании и занимает в два  раза больше места.
# (type=<class 'dict'>, size=368)

# Вариант №3, самой простой в написании, но set занимает очень много места.
# (type=<class 'set'>, size=736)

# Если брать в расчет количество занимаемой памяти , то самый выгодный- это вариант с list то есть 1,
# а сымый не выгодный - это вариант 3 с set, но он самый простой в написании(можно было и не использовать set,
# но для наглядности). Вариант 2, в нем самый развернутый ответ.


# Версия интерпритатора : 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 16:52:21)
# [Clang 6.0 (clang-600.0.57)]
#
# Версия OC: Darwin-19.3.0-x86_64-i386-64bit


# Вариант №1
# type=<class 'list'>, size=128, object=[49, 33, 24, 19, 16, 14, 12, 11]
# 	 type=<class 'int'>, size=28, object=49
# 	 type=<class 'int'>, size=28, object=33
# 	 type=<class 'int'>, size=28, object=24
# 	 type=<class 'int'>, size=28, object=19
# 	 type=<class 'int'>, size=28, object=16
# 	 type=<class 'int'>, size=28, object=14
# 	 type=<class 'int'>, size=28, object=12
# 	 type=<class 'int'>, size=28, object=11

#     type=<class 'int'>, size=28, object=9


# Вариант №2
# type=<class 'dict'>, size=368, object={
#     2: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98],
#     3: [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99],
#     4: [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96],
#     5: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95],
#     6: [6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96],
#     7: [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98],
#     8: [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96],
#     9: [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99]
# }
# 	 type=<class 'int'>, size=28, object=2
# 	 type=<class 'int'>, size=28, object=3
# 	 type=<class 'int'>, size=28, object=4
# 	 type=<class 'int'>, size=28, object=5
# 	 type=<class 'int'>, size=28, object=6
# 	 type=<class 'int'>, size=28, object=7
# 	 type=<class 'int'>, size=28, object=8
# 	 type=<class 'int'>, size=28, object=9

# Вариант № 3
# type=<class 'set'>, size=736, object={
#     'Число 6 кратно - 16 чисел',
#     'Число 3 кратно - 33 чисел',
#     'Число 8 кратно - 12 чисел',
#     'Число 4 кратно - 24 чисел',
#     'Число 5 кратно - 19 чисел',
#     'Число 7 кратно - 14 чисел',
#     'Число 9 кратно - 11 чисел',
#     'Число 2 кратно - 49 чисел'
# }
# 	 type=<class 'str'>, size=124, object=Число 6 кратно - 16 чисел
# 	 type=<class 'str'>, size=124, object=Число 3 кратно - 33 чисел
# 	 type=<class 'str'>, size=124, object=Число 8 кратно - 12 чисел
# 	 type=<class 'str'>, size=124, object=Число 4 кратно - 24 чисел
# 	 type=<class 'str'>, size=124, object=Число 5 кратно - 19 чисел
# 	 type=<class 'str'>, size=124, object=Число 7 кратно - 14 чисел
# 	 type=<class 'str'>, size=124, object=Число 9 кратно - 11 чисел
# 	 type=<class 'str'>, size=124, object=Число 2 кратно - 49 чисел


# Задача
# В диапазоне натуральных чисел от 2 до 99 определить, сколько из них кратны каждому
# из чисел в диапазоне от 2 до 9.


import sys
import platform

print(f'Версия интерпритатора : {sys.version}\n')
print(f'Версия OC: {platform.platform()}\n')


# # Вариант №1
a = [0] * 8

for i in range(2, 100):

    for j in range(2, 10):

        if i % j == 0:

            a[j - 2] += 1
i = 0

while i < len(a):

    # print(f'Для числа {i+2} - {a[i]} чисел кратны ')
    i += 1


# Вариант №2
total = {}

for i in range(2, 10):

    total[i] = []
    for itm in range(2, 100):

        if itm % i == 0:
            total[i].append(itm)

    # print(f'Для числа {i} кратны - {len(total[i])} Чисел. Эти числа: {total[i]}.')


# # Вариант №3
result = set()

for itm in range(2, 10):
    result.add(f'Число {itm} кратно - {99 // itm} чисел')

# for itm in result:
#     print(itm)


def show_size(x, level=0):
    print('\t' * level, f'type={x.__class__}, size={sys.getsizeof(x)}, object={x}')

    if hasattr(x, '__iter__'):
        if hasattr(x, '__items__'):
            for xx in x.items():
                show_size(xx, level + 1)
        elif not isinstance(x, str):
            for xx in x:
                show_size(xx, level + 1)


